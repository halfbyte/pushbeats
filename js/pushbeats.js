// Generated by CoffeeScript 1.7.1
(function() {
  var basedrum, bdview, sdview, sequencer, snaredrum,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.PB = {};

  PB.MasterControl = (function(_super) {
    __extends(MasterControl, _super);

    function MasterControl() {
      this.changeTempo = __bind(this.changeTempo, this);
      this.togglePlay = __bind(this.togglePlay, this);
      return MasterControl.__super__.constructor.apply(this, arguments);
    }

    MasterControl.prototype.el = '.master-controls';

    MasterControl.prototype.events = {
      'click #play': "togglePlay",
      'change #tempo': "changeTempo"
    };

    MasterControl.prototype.initialize = function() {
      this.model.on('tempo-changed', (function(_this) {
        return function(tempo) {
          return _this.$('#tempo').val(tempo);
        };
      })(this));
      this.model.on('playing', (function(_this) {
        return function() {
          return _this.$('#play').html('Stop').addClass('playing');
        };
      })(this));
      return this.model.on('stopped', (function(_this) {
        return function() {
          return _this.$('#play').html('Play').removeClass('playing');
        };
      })(this));
    };

    MasterControl.prototype.togglePlay = function(e) {
      console.log(this.model);
      e.preventDefault();
      return this.model.trigger('start-stop');
    };

    MasterControl.prototype.changeTempo = function(e) {
      console.log("change Tempo", e.target.value);
      return this.model.trigger('change-tempo', e.target.value);
    };

    return MasterControl;

  })(Backbone.View);

  PB.GridControl = (function(_super) {
    __extends(GridControl, _super);

    function GridControl() {
      this.toggleGridBox = __bind(this.toggleGridBox, this);
      return GridControl.__super__.constructor.apply(this, arguments);
    }

    GridControl.prototype.el = '#grid';

    GridControl.prototype.events = {
      'click .grid-box': 'toggleGridBox'
    };

    GridControl.prototype.initialize = function() {
      console.log("Init Grid", this.$el);
      this.model.on('grid-set', (function(_this) {
        return function(row, col) {
          return _this.$("#grid-" + row + "-" + col).addClass('set');
        };
      })(this));
      return this.model.on('grid-clear', (function(_this) {
        return function(row, col) {
          return _this.$("#grid-" + row + "-" + col).removeClass('set');
        };
      })(this));
    };

    GridControl.prototype.toggleGridBox = function(e) {
      var col, match, row;
      match = e.target.id.match(/grid-(\d+)-(\d+)/);
      row = match[1];
      col = match[2];
      e.preventDefault();
      return this.model.trigger('toggle-grid', row, col);
    };

    return GridControl;

  })(Backbone.View);

  PB.Sequencer = (function() {
    function Sequencer() {
      _.extend(this, Backbone.Events);
      this.tempo = 120;
      this.play = false;
      console.log(this);
      this.grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
      this.on('inc-tempo', (function(_this) {
        return function(inc) {
          console.log("inc-tempo", inc);
          _this.tempo += inc;
          if (_this.tempo > 200) {
            _this.tempo = 200;
          }
          return _this.trigger('tempo-changed', _this.tempo);
        };
      })(this));
      this.on('dec-tempo', (function(_this) {
        return function(inc) {
          console.log("dec-tempo", inc);
          _this.tempo -= inc;
          if (_this.tempo < 50) {
            _this.tempo = 50;
          }
          return _this.trigger('tempo-changed', _this.tempo);
        };
      })(this));
      this.on('change-tempo', (function(_this) {
        return function(tempo) {
          _this.tempo = tempo;
          return _this.trigger('tempo-changed', tempo);
        };
      })(this));
      this.on('start-stop', (function(_this) {
        return function() {
          _this.play = !_this.play;
          if (_this.play) {
            return _this.trigger('playing');
          } else {
            return _this.trigger('stopped');
          }
        };
      })(this));
      this.on('toggle-grid', (function(_this) {
        return function(row, col) {
          _this.grid[row - 1][col - 1] = !_this.grid[row - 1][col - 1];
          if (_this.grid[row - 1][col - 1]) {
            _this.trigger('grid-set', row, col);
          } else {
            _this.trigger('grid-clear', row, col);
          }
          return console.log(_this.grid);
        };
      })(this));
    }

    return Sequencer;

  })();

  PB.Sound = (function() {
    function Sound(params) {
      this.params = params;
      console.log(this.params);
      _.extend(this, Backbone.Events);
      this.on('value-change', (function(_this) {
        return function(name, value) {
          console.log(_this.params, name);
          _this.params[name].value = value;
          _this.trigger('value-changed', name, value);
          return console.log("value changed", name, value);
        };
      })(this));
      this.on('value-inc', (function(_this) {
        return function(name, inc) {
          _this.params[name].value += inc;
          if (_this.params[name].value > _this.params[name].max) {
            _this.params[name].value = _this.params[name].max;
          }
          return _this.trigger('value-changed', name, value);
        };
      })(this));
      this.on('value-dec', (function(_this) {
        return function(name, inc) {
          _this.params[name].value += inc;
          if (_this.params[name].value > _this.params[name].max) {
            _this.params[name].value = _this.params[name].max;
          }
          return _this.trigger('value-changed', name, value);
        };
      })(this));
    }

    return Sound;

  })();

  PB.BaseDrum = (function(_super) {
    __extends(BaseDrum, _super);

    function BaseDrum() {
      return BaseDrum.__super__.constructor.apply(this, arguments);
    }

    BaseDrum.prototype.params = {
      sweep: {
        min: 0,
        max: 127,
        name: 'Sweep',
        value: 64
      },
      decay: {
        min: 0,
        max: 127,
        name: 'Decay',
        value: 64
      }
    };

    return BaseDrum;

  })(PB.Sound);

  PB.SoundView = (function(_super) {
    __extends(SoundView, _super);

    function SoundView() {
      this.initialize = __bind(this.initialize, this);
      this.valueChanged = __bind(this.valueChanged, this);
      return SoundView.__super__.constructor.apply(this, arguments);
    }

    SoundView.prototype.events = {
      "change input": "valueChanged"
    };

    SoundView.prototype.valueChanged = function(e) {
      var name;
      console.log(e.target);
      name = e.target.name;
      return this.model.trigger('value-change', name, e.target.value);
    };

    SoundView.prototype.initialize = function() {
      return this.model.on('value-changed', (function(_this) {
        return function(name, value) {
          return _this.$("#" + name).val(value);
        };
      })(this));
    };

    return SoundView;

  })(Backbone.View);

  PB.PushInterface = (function(_super) {
    __extends(PushInterface, _super);

    function PushInterface() {
      this.postInit = __bind(this.postInit, this);
      this.sendSysEx = __bind(this.sendSysEx, this);
      this.send = __bind(this.send, this);
      this.onMIDIMessage = __bind(this.onMIDIMessage, this);
      this.failMIDI = __bind(this.failMIDI, this);
      this.initMIDI = __bind(this.initMIDI, this);
      return PushInterface.__super__.constructor.apply(this, arguments);
    }

    PushInterface.prototype.initialize = function() {
      this.SLOTS = [0, 9, 17, 26, 34, 43, 51, 60];
      console.log("INIT MIDI");
      return navigator.requestMIDIAccess({
        sysex: true
      }).then(this.initMIDI, this.failMIDI);
    };

    PushInterface.prototype.initMIDI = function(info) {
      info.inputs.forEach((function(_this) {
        return function(input) {
          console.log(input.name);
          if (input.name === 'Ableton Push User Port') {
            _this.input = input;
            return input.onmidimessage = _this.onMIDIMessage;
          }
        };
      })(this));
      info.outputs.forEach((function(_this) {
        return function(output) {
          console.log(output.name);
          if (output.name === 'Ableton Push User Port') {
            _this.userOutput = output;
          }
          if (output.name === 'Ableton Push Live Port') {
            return _this.liveOutput = output;
          }
        };
      })(this));
      return this.postInit();
    };

    PushInterface.prototype.failMIDI = function(message) {
      return alert(message);
    };

    PushInterface.prototype.onMIDIMessage = function(message) {
      var col, data, note, row, x, y, _ref;
      data = message.data;
      if (data[0] === 144) {
        if (data[1] >= 36 && data[1] <= 99) {
          note = data[1] - 36;
          y = 7 - Math.floor(note / 8);
          x = note % 8;
          _ref = this.xy2ColRow(x, y), row = _ref[0], col = _ref[1];
          this.model.trigger('toggle-grid', row, col);
          return;
        }
      }
      if (data[0] === 176) {
        if (data[1] === 14) {
          if (data[2] < 64) {
            this.model.trigger('inc-tempo', data[2]);
            return;
          } else {
            this.model.trigger('dec-tempo', 128 - data[2]);
            return;
          }
        }
        if (data[1] === 85) {
          if (data[2] === 127) {
            this.model.trigger('start-stop');
          }
        }
      }
      return console.log("IN", data);
    };

    PushInterface.prototype.send = function(bytes) {
      return this.userOutput.send(bytes);
    };

    PushInterface.prototype.sendSysEx = function(bytes) {
      return this.liveOutput.send(bytes);
    };

    PushInterface.prototype.setPad = function(x, y, note) {
      var pad;
      pad = 36 + ((7 - y) * 8) + x;
      return this.send([144, pad, note]);
    };

    PushInterface.prototype.xy2ColRow = function(x, y) {
      var col, row;
      row = Math.floor(y / 2) + 1;
      col = x + 1;
      if (y % 2 === 1) {
        col = col + 8;
      }
      return [row, col];
    };

    PushInterface.prototype.rowCol2XY = function(row, col) {
      var x, y;
      y = (row - 1) * 2;
      x = col - 1;
      if (col > 8) {
        y += 1;
      }
      x = x % 8;
      return [x, y];
    };

    PushInterface.prototype.strToBytes = function(instring) {
      var bytes, charcode, i, _i, _ref;
      bytes = [];
      for (i = _i = 0, _ref = instring.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        charcode = instring.charCodeAt(i);
        if (charcode < 127) {
          bytes.push(charcode);
        }
      }
      return bytes;
    };

    PushInterface.prototype.textInSlot = function(line, slot, str) {
      var offset;
      offset = this.SLOTS[slot];
      if (str.length > 8) {
        str = str.slice(0, 8);
      }
      str = str + "        ".substr(0, 8 - str.length);
      return this.sendSysEx(this.displaySysEx(line, offset, this.strToBytes(str)));
    };

    PushInterface.prototype.valueInSlot = function(line, slot, val) {
      var offset, str;
      offset = this.SLOTS[slot];
      str = val.toString(10);
      str = "        ".substr(0, 8 - str.length) + str;
      return this.sendSysEx(this.displaySysEx(line, offset, this.strToBytes(str)));
    };

    PushInterface.prototype.displaySysEx = function(line, offset, strBytes) {
      var maxLen, message;
      maxLen = 68 - offset;
      if (strBytes.length > maxLen) {
        strBytes = strBytes.slice(0, maxLen);
      }
      message = [240, 71, 127, 21, line + 24, 0, strBytes.length + 1, offset];
      message = message.concat(strBytes);
      message.push(247);
      return message;
    };

    PushInterface.prototype.postInit = function() {
      var note, _i;
      for (note = _i = 36; _i <= 99; note = ++_i) {
        this.send([128, note, 0]);
      }
      this.model.on("grid-set", (function(_this) {
        return function(row, col) {
          var x, y, _ref;
          console.log("SET");
          _ref = _this.rowCol2XY(row, col), x = _ref[0], y = _ref[1];
          return _this.setPad(x, y, 10);
        };
      })(this));
      this.model.on("grid-clear", (function(_this) {
        return function(row, col) {
          var x, y, _ref;
          console.log("CLEAR");
          _ref = _this.rowCol2XY(row, col), x = _ref[0], y = _ref[1];
          return _this.setPad(x, y, 0);
        };
      })(this));
      this.model.on("playing", (function(_this) {
        return function() {
          return _this.send([176, 85, 4]);
        };
      })(this));
      this.model.on("stopped", (function(_this) {
        return function() {
          return _this.send([176, 85, 1]);
        };
      })(this));
      this.send([176, 85, 1]);
      this.textInSlot(3, 0, "BaseDrum");
      this.textInSlot(3, 1, "SnreDrum");
      this.textInSlot(3, 2, "HHatClos");
      return this.textInSlot(3, 3, "HHatOpen");
    };

    return PushInterface;

  })(Backbone.View);

  basedrum = new PB.Sound({
    sweep: {
      min: 0,
      max: 127,
      name: 'Sweep',
      value: 64
    },
    decay: {
      min: 0,
      max: 127,
      name: 'Decay',
      value: 64
    },
    start: {
      min: 0,
      max: 127,
      name: 'Decay',
      value: 64
    },
    end: {
      min: 0,
      max: 127,
      name: 'Decay',
      value: 64
    }
  });

  snaredrum = new PB.Sound({
    sweep: {
      min: 0,
      max: 127,
      name: 'Sweep',
      value: 64
    },
    decay: {
      min: 0,
      max: 127,
      name: 'Decay',
      value: 64
    },
    start: {
      min: 0,
      max: 127,
      name: 'Decay',
      value: 64
    },
    end: {
      min: 0,
      max: 127,
      name: 'Decay',
      value: 64
    },
    lowpass: {
      min: 0,
      max: 127,
      name: 'Frequency',
      value: 64
    }
  });

  bdview = new PB.SoundView({
    model: basedrum,
    el: '#basedrum'
  });

  sdview = new PB.SoundView({
    model: snaredrum,
    el: '#snaredrum'
  });

  sequencer = new PB.Sequencer();

  PB.MC = new PB.MasterControl({
    model: sequencer
  });

  PB.Grid = new PB.GridControl({
    model: sequencer
  });

  PB.Push = new PB.PushInterface({
    model: sequencer
  });

  console.log("UHU");

}).call(this);
